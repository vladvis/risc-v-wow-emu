"""
print(MFR)
if MFR == nil then
   MFR = CreateFrame("Frame",nil,UIParent)
   
   
   
   MFR:SetFrameStrata("BACKGROUND")
   MFR:SetWidth(40) -- Set these to whatever height/width is needed 
   MFR:SetHeight(40) -- for your Texture
   
   local t = MFR:CreateTexture(nil,"BACKGROUND")
   t:SetTexture("Interface\\Glues\\CharacterCreate\\UI-CharacterCreate-Factions.blp")
   t:SetTexCoord(0.5,1,0,1)
   t:SetAllPoints(MFR)
   --t:SetDrawLayer("ARTWORK", 1)
   --t:SetSize(40, 40)
   MFR.texturex = t
   
   MFR:SetPoint("CENTER",10,100)
   MFR:Show()
else
   local t1 = debugprofilestop()
   for i=0,5000000 do
      MFR.texturex:SetTexCoord(0,i/1000000,0,1)
   end
   local t2 = debugprofilestop()
   print("texcoord", t2-t1)
   
end

if false==false then
   local t1 = debugprofilestop()
   for i=0,10000000 do
      MFR.texturex:SetColorTexture(i/1000000, 0.5, 0.5)
   end
   local t2 = debugprofilestop()
   print("color", t2-t1)
end"""
from PIL import Image


DOOM_PALETTE = [
    (0x0, 0x0, 0x0),
    (0x1f, 0x17, 0xb),
    (0x17, 0xf, 0x7),
    (0x4b, 0x4b, 0x4b),
    (0xff, 0xff, 0xff),
    (0x1b, 0x1b, 0x1b),
    (0x13, 0x13, 0x13),
    (0xb, 0xb, 0xb),
    (0x7, 0x7, 0x7),
    (0x2f, 0x37, 0x1f),
    (0x23, 0x2b, 0xf),
    (0x17, 0x1f, 0x7),
    (0xf, 0x17, 0x0),
    (0x4f, 0x3b, 0x2b),
    (0x47, 0x33, 0x23),
    (0x3f, 0x2b, 0x1b),
    (0xff, 0xb7, 0xb7),
    (0xf7, 0xab, 0xab),
    (0xf3, 0xa3, 0xa3),
    (0xeb, 0x97, 0x97),
    (0xe7, 0x8f, 0x8f),
    (0xdf, 0x87, 0x87),
    (0xdb, 0x7b, 0x7b),
    (0xd3, 0x73, 0x73),
    (0xcb, 0x6b, 0x6b),
    (0xc7, 0x63, 0x63),
    (0xbf, 0x5b, 0x5b),
    (0xbb, 0x57, 0x57),
    (0xb3, 0x4f, 0x4f),
    (0xaf, 0x47, 0x47),
    (0xa7, 0x3f, 0x3f),
    (0xa3, 0x3b, 0x3b),
    (0x9b, 0x33, 0x33),
    (0x97, 0x2f, 0x2f),
    (0x8f, 0x2b, 0x2b),
    (0x8b, 0x23, 0x23),
    (0x83, 0x1f, 0x1f),
    (0x7f, 0x1b, 0x1b),
    (0x77, 0x17, 0x17),
    (0x73, 0x13, 0x13),
    (0x6b, 0xf, 0xf),
    (0x67, 0xb, 0xb),
    (0x5f, 0x7, 0x7),
    (0x5b, 0x7, 0x7),
    (0x53, 0x7, 0x7),
    (0x4f, 0x0, 0x0),
    (0x47, 0x0, 0x0),
    (0x43, 0x0, 0x0),
    (0xff, 0xeb, 0xdf),
    (0xff, 0xe3, 0xd3),
    (0xff, 0xdb, 0xc7),
    (0xff, 0xd3, 0xbb),
    (0xff, 0xcf, 0xb3),
    (0xff, 0xc7, 0xa7),
    (0xff, 0xbf, 0x9b),
    (0xff, 0xbb, 0x93),
    (0xff, 0xb3, 0x83),
    (0xf7, 0xab, 0x7b),
    (0xef, 0xa3, 0x73),
    (0xe7, 0x9b, 0x6b),
    (0xdf, 0x93, 0x63),
    (0xd7, 0x8b, 0x5b),
    (0xcf, 0x83, 0x53),
    (0xcb, 0x7f, 0x4f),
    (0xbf, 0x7b, 0x4b),
    (0xb3, 0x73, 0x47),
    (0xab, 0x6f, 0x43),
    (0xa3, 0x6b, 0x3f),
    (0x9b, 0x63, 0x3b),
    (0x8f, 0x5f, 0x37),
    (0x87, 0x57, 0x33),
    (0x7f, 0x53, 0x2f),
    (0x77, 0x4f, 0x2b),
    (0x6b, 0x47, 0x27),
    (0x5f, 0x43, 0x23),
    (0x53, 0x3f, 0x1f),
    (0x4b, 0x37, 0x1b),
    (0x3f, 0x2f, 0x17),
    (0x33, 0x2b, 0x13),
    (0x2b, 0x23, 0xf),
    (0xef, 0xef, 0xef),
    (0xe7, 0xe7, 0xe7),
    (0xdf, 0xdf, 0xdf),
    (0xdb, 0xdb, 0xdb),
    (0xd3, 0xd3, 0xd3),
    (0xcb, 0xcb, 0xcb),
    (0xc7, 0xc7, 0xc7),
    (0xbf, 0xbf, 0xbf),
    (0xb7, 0xb7, 0xb7),
    (0xb3, 0xb3, 0xb3),
    (0xab, 0xab, 0xab),
    (0xa7, 0xa7, 0xa7),
    (0x9f, 0x9f, 0x9f),
    (0x97, 0x97, 0x97),
    (0x93, 0x93, 0x93),
    (0x8b, 0x8b, 0x8b),
    (0x83, 0x83, 0x83),
    (0x7f, 0x7f, 0x7f),
    (0x77, 0x77, 0x77),
    (0x6f, 0x6f, 0x6f),
    (0x6b, 0x6b, 0x6b),
    (0x63, 0x63, 0x63),
    (0x5b, 0x5b, 0x5b),
    (0x57, 0x57, 0x57),
    (0x4f, 0x4f, 0x4f),
    (0x47, 0x47, 0x47),
    (0x43, 0x43, 0x43),
    (0x3b, 0x3b, 0x3b),
    (0x37, 0x37, 0x37),
    (0x2f, 0x2f, 0x2f),
    (0x27, 0x27, 0x27),
    (0x23, 0x23, 0x23),
    (0x77, 0xff, 0x6f),
    (0x6f, 0xef, 0x67),
    (0x67, 0xdf, 0x5f),
    (0x5f, 0xcf, 0x57),
    (0x5b, 0xbf, 0x4f),
    (0x53, 0xaf, 0x47),
    (0x4b, 0x9f, 0x3f),
    (0x43, 0x93, 0x37),
    (0x3f, 0x83, 0x2f),
    (0x37, 0x73, 0x2b),
    (0x2f, 0x63, 0x23),
    (0x27, 0x53, 0x1b),
    (0x1f, 0x43, 0x17),
    (0x17, 0x33, 0xf),
    (0x13, 0x23, 0xb),
    (0xb, 0x17, 0x7),
    (0xbf, 0xa7, 0x8f),
    (0xb7, 0x9f, 0x87),
    (0xaf, 0x97, 0x7f),
    (0xa7, 0x8f, 0x77),
    (0x9f, 0x87, 0x6f),
    (0x9b, 0x7f, 0x6b),
    (0x93, 0x7b, 0x63),
    (0x8b, 0x73, 0x5b),
    (0x83, 0x6b, 0x57),
    (0x7b, 0x63, 0x4f),
    (0x77, 0x5f, 0x4b),
    (0x6f, 0x57, 0x43),
    (0x67, 0x53, 0x3f),
    (0x5f, 0x4b, 0x37),
    (0x57, 0x43, 0x33),
    (0x53, 0x3f, 0x2f),
    (0x9f, 0x83, 0x63),
    (0x8f, 0x77, 0x53),
    (0x83, 0x6b, 0x4b),
    (0x77, 0x5f, 0x3f),
    (0x67, 0x53, 0x33),
    (0x5b, 0x47, 0x2b),
    (0x4f, 0x3b, 0x23),
    (0x43, 0x33, 0x1b),
    (0x7b, 0x7f, 0x63),
    (0x6f, 0x73, 0x57),
    (0x67, 0x6b, 0x4f),
    (0x5b, 0x63, 0x47),
    (0x53, 0x57, 0x3b),
    (0x47, 0x4f, 0x33),
    (0x3f, 0x47, 0x2b),
    (0x37, 0x3f, 0x27),
    (0xff, 0xff, 0x73),
    (0xeb, 0xdb, 0x57),
    (0xd7, 0xbb, 0x43),
    (0xc3, 0x9b, 0x2f),
    (0xaf, 0x7b, 0x1f),
    (0x9b, 0x5b, 0x13),
    (0x87, 0x43, 0x7),
    (0x73, 0x2b, 0x0),
    (0xff, 0xff, 0xff),
    (0xff, 0xdb, 0xdb),
    (0xff, 0xbb, 0xbb),
    (0xff, 0x9b, 0x9b),
    (0xff, 0x7b, 0x7b),
    (0xff, 0x5f, 0x5f),
    (0xff, 0x3f, 0x3f),
    (0xff, 0x1f, 0x1f),
    (0xff, 0x0, 0x0),
    (0xef, 0x0, 0x0),
    (0xe3, 0x0, 0x0),
    (0xd7, 0x0, 0x0),
    (0xcb, 0x0, 0x0),
    (0xbf, 0x0, 0x0),
    (0xb3, 0x0, 0x0),
    (0xa7, 0x0, 0x0),
    (0x9b, 0x0, 0x0),
    (0x8b, 0x0, 0x0),
    (0x7f, 0x0, 0x0),
    (0x73, 0x0, 0x0),
    (0x67, 0x0, 0x0),
    (0x5b, 0x0, 0x0),
    (0x4f, 0x0, 0x0),
    (0x43, 0x0, 0x0),
    (0xe7, 0xe7, 0xff),
    (0xc7, 0xc7, 0xff),
    (0xab, 0xab, 0xff),
    (0x8f, 0x8f, 0xff),
    (0x73, 0x73, 0xff),
    (0x53, 0x53, 0xff),
    (0x37, 0x37, 0xff),
    (0x1b, 0x1b, 0xff),
    (0x0, 0x0, 0xff),
    (0x0, 0x0, 0xe3),
    (0x0, 0x0, 0xcb),
    (0x0, 0x0, 0xb3),
    (0x0, 0x0, 0x9b),
    (0x0, 0x0, 0x83),
    (0x0, 0x0, 0x6b),
    (0x0, 0x0, 0x53),
    (0xff, 0xff, 0xff),
    (0xff, 0xeb, 0xdb),
    (0xff, 0xd7, 0xbb),
    (0xff, 0xc7, 0x9b),
    (0xff, 0xb3, 0x7b),
    (0xff, 0xa3, 0x5b),
    (0xff, 0x8f, 0x3b),
    (0xff, 0x7f, 0x1b),
    (0xf3, 0x73, 0x17),
    (0xeb, 0x6f, 0xf),
    (0xdf, 0x67, 0xf),
    (0xd7, 0x5f, 0xb),
    (0xcb, 0x57, 0x7),
    (0xc3, 0x4f, 0x0),
    (0xb7, 0x47, 0x0),
    (0xaf, 0x43, 0x0),
    (0xff, 0xff, 0xff),
    (0xff, 0xff, 0xd7),
    (0xff, 0xff, 0xb3),
    (0xff, 0xff, 0x8f),
    (0xff, 0xff, 0x6b),
    (0xff, 0xff, 0x47),
    (0xff, 0xff, 0x23),
    (0xff, 0xff, 0x0),
    (0xa7, 0x3f, 0x0),
    (0x9f, 0x37, 0x0),
    (0x93, 0x2f, 0x0),
    (0x87, 0x23, 0x0),
    (0x4f, 0x3b, 0x27),
    (0x43, 0x2f, 0x1b),
    (0x37, 0x23, 0x13),
    (0x2f, 0x1b, 0xb),
    (0x0, 0x0, 0x53),
    (0x0, 0x0, 0x47),
    (0x0, 0x0, 0x3b),
    (0x0, 0x0, 0x2f),
    (0x0, 0x0, 0x23),
    (0x0, 0x0, 0x17),
    (0x0, 0x0, 0xb),
    (0x0, 0x0, 0x0),
    (0xff, 0x9f, 0x43),
    (0xff, 0xe7, 0x4b),
    (0xff, 0x7b, 0xff),
    (0xff, 0x0, 0xff),
    (0xcf, 0x0, 0xcf),
    (0x9f, 0x0, 0x9b),
    (0x6f, 0x0, 0x6b),
    (0xa7, 0x6b, 0x6b)
]

def create_palette_texture(rgb_colors):
    pal = []
    for c in rgb_colors:
        pal.extend(c)

    img = Image.new("P", (1024, 2)) # account for 2x2 pixels and separate adjacent colors
    img.putpalette(pal, 'RGB')
    for i in range(256):
        for x in range(4):
            for y in range(2):
                img.putpixel((i*4 + x, y), i)
    return img

palette_texture = create_palette_texture(DOOM_PALETTE)

palette_texture.save("palette.blp")
